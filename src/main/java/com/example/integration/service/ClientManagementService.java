package com.example.integration.service;

import com.example.integration.dto.ClientAppCreateRequest;
import com.example.integration.dto.ClientAppDTO;
import com.example.integration.model.ClientApplication;
import com.example.integration.repository.ClientApplicationRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
 */
@Service
public class ClientManagementService {
    
    private static final Logger log = LoggerFactory.getLogger(ClientManagementService.class);
    
    private final ClientApplicationRepository clientAppRepository;
    
    public ClientManagementService(ClientApplicationRepository clientAppRepository) {
        this.clientAppRepository = clientAppRepository;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    @Transactional(readOnly = true)
    public List<ClientAppDTO> getAllClients() {
        return clientAppRepository.findAll().stream()
            .map(this::toDTO)
            .collect(Collectors.toList());
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
     */
    @Transactional
    public ClientAppDTO createClient(ClientAppCreateRequest request) {
        ClientApplication client = new ClientApplication();
        client.setName(request.getName());
        client.setDescription(request.getDescription());
        client.setApiKey(generateApiKey());
        client.setIsActive(true);
        
        client = clientAppRepository.save(client);
        return toDTO(client);
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
     */
    @Transactional
    public ClientAppDTO updateClient(UUID id, ClientAppCreateRequest request) {
        ClientApplication client = clientAppRepository.findById(id)
            .orElseThrow(() -> new IllegalArgumentException("Client not found"));
        
        client.setName(request.getName());
        client.setDescription(request.getDescription());
        
        client = clientAppRepository.save(client);
        return toDTO(client);
    }
    
    /**
     * –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
     */
    @Transactional
    public void deactivateClient(UUID id) {
        log.info("üîç [Admin] –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å ID: {}", id);
        
        ClientApplication client = clientAppRepository.findById(id)
            .orElseThrow(() -> {
                log.error("‚ùå [Admin] –ö–ª–∏–µ–Ω—Ç —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω", id);
                return new IllegalArgumentException("Client not found");
            });
        
        log.info("üìã [Admin] –ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç: {} (–∞–∫—Ç–∏–≤–µ–Ω: {})", client.getName(), client.getIsActive());
        
        client.setIsActive(false);
        ClientApplication savedClient = clientAppRepository.save(client);
        
        log.info("‚úÖ [Admin] –ö–ª–∏–µ–Ω—Ç {} —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (ID: {})", savedClient.getName(), savedClient.getId());
    }
    
    /**
     * –†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å API –∫–ª—é—á
     */
    @Transactional
    public ClientAppDTO regenerateApiKey(UUID id) {
        ClientApplication client = clientAppRepository.findById(id)
            .orElseThrow(() -> new IllegalArgumentException("Client not found"));
        
        client.setApiKey(generateApiKey());
        client = clientAppRepository.save(client);
        return toDTO(client);
    }
    
    private String generateApiKey() {
        return "aikey_" + UUID.randomUUID().toString().replace("-", "");
    }
    
    private ClientAppDTO toDTO(ClientApplication client) {
        ClientAppDTO dto = new ClientAppDTO();
        dto.setId(client.getId().toString());
        dto.setName(client.getName());
        dto.setDescription(client.getDescription());
        dto.setApiKey(client.getApiKey());
        dto.setIsActive(client.getIsActive());
        dto.setCreatedAt(client.getCreatedAt());
        dto.setUpdatedAt(client.getUpdatedAt());
        return dto;
    }
}

