package com.example.integration.controller;

import com.example.integration.dto.ClientNetworkAccessDTO;
import com.example.integration.dto.GrantAccessRequest;
import com.example.integration.service.NetworkAccessService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
 */
@RestController
@RequestMapping("/api/admin/access")
@Tag(name = "Network Access Management", description = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º")
public class NetworkAccessController {

    private static final Logger log = LoggerFactory.getLogger(NetworkAccessController.class);

    private final NetworkAccessService networkAccessService;

    @Autowired
    public NetworkAccessController(NetworkAccessService networkAccessService) {
        this.networkAccessService = networkAccessService;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø—ã
     */
    @GetMapping
    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø—ã", description = "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–æ–≤ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ"),
            @ApiResponse(responseCode = "401", description = "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"),
            @ApiResponse(responseCode = "403", description = "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
    })
    public ResponseEntity<List<ClientNetworkAccessDTO>> getAllAccesses() {
        log.info("üîç [Admin] –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º");
        
        try {
            List<ClientNetworkAccessDTO> accesses = networkAccessService.getAllAccesses();
            log.info("‚úÖ [Admin] –ü–æ–ª—É—á–µ–Ω–æ {} –¥–æ—Å—Ç—É–ø–æ–≤", accesses.size());
            return ResponseEntity.ok(accesses);
        } catch (Exception e) {
            log.error("‚ùå [Admin] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–≤", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ ID
     */
    @GetMapping("/{accessId}")
    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ ID", description = "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–î–æ—Å—Ç—É–ø –Ω–∞–π–¥–µ–Ω"),
            @ApiResponse(responseCode = "404", description = "–î–æ—Å—Ç—É–ø –Ω–µ –Ω–∞–π–¥–µ–Ω"),
            @ApiResponse(responseCode = "401", description = "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"),
            @ApiResponse(responseCode = "403", description = "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
    })
    public ResponseEntity<ClientNetworkAccessDTO> getAccessById(@PathVariable UUID accessId) {
        log.info("üîç [Admin] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ ID: {}", accessId);
        
        try {
            ClientNetworkAccessDTO access = networkAccessService.getAccessById(accessId);
            log.info("‚úÖ [Admin] –î–æ—Å—Ç—É–ø –Ω–∞–π–¥–µ–Ω: {} -> {}", access.getClientName(), access.getNetworkDisplayName());
            return ResponseEntity.ok(access);
        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è [Admin] –î–æ—Å—Ç—É–ø –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", accessId);
            return ResponseEntity.notFound().build();
        } catch (Exception e) {
            log.error("‚ùå [Admin] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–ª–∏–µ–Ω—Ç—É –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
     */
    @PostMapping
    @Operation(summary = "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø", description = "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–ª–∏–µ–Ω—Ç–∞ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"),
            @ApiResponse(responseCode = "400", description = "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞"),
            @ApiResponse(responseCode = "401", description = "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"),
            @ApiResponse(responseCode = "403", description = "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
    })
    public ResponseEntity<ClientNetworkAccessDTO> grantAccess(@RequestBody GrantAccessRequest request) {
        log.info("üîó [Admin] –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫–ª–∏–µ–Ω—Ç—É {} –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ {}", 
                request.getClientId(), request.getNetworkId());
        
        try {
            ClientNetworkAccessDTO access = networkAccessService.grantAccess(request);
            log.info("‚úÖ [Admin] –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω: {} -> {} (–ª–∏–º–∏—Ç—ã: {})", 
                    access.getClientName(), access.getNetworkDisplayName(), access.getLimitsDescription());
            return ResponseEntity.ok(access);
        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è [Admin] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        } catch (Exception e) {
            log.error("‚ùå [Admin] –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * –û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø
     */
    @DeleteMapping("/{accessId}")
    @Operation(summary = "–û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø", description = "–û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫–ª–∏–µ–Ω—Ç–∞ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–î–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ"),
            @ApiResponse(responseCode = "404", description = "–î–æ—Å—Ç—É–ø –Ω–µ –Ω–∞–π–¥–µ–Ω"),
            @ApiResponse(responseCode = "401", description = "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"),
            @ApiResponse(responseCode = "403", description = "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
    })
    public ResponseEntity<Void> revokeAccess(@PathVariable UUID accessId) {
        log.info("üóëÔ∏è [Admin] –û—Ç–∑—ã–≤ –¥–æ—Å—Ç—É–ø–∞ —Å ID: {}", accessId);
        
        try {
            networkAccessService.revokeAccess(accessId);
            log.info("‚úÖ [Admin] –î–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
            return ResponseEntity.ok().build();
        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è [Admin] –î–æ—Å—Ç—É–ø –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", accessId);
            return ResponseEntity.notFound().build();
        } catch (Exception e) {
            log.error("‚ùå [Admin] –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ –¥–æ—Å—Ç—É–ø–∞", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
     */
    @GetMapping("/client/{clientId}")
    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø—ã –∫–ª–∏–µ–Ω—Ç–∞", description = "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–î–æ—Å—Ç—É–ø—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"),
            @ApiResponse(responseCode = "404", description = "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"),
            @ApiResponse(responseCode = "401", description = "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"),
            @ApiResponse(responseCode = "403", description = "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
    })
    public ResponseEntity<List<ClientNetworkAccessDTO>> getClientAccesses(@PathVariable UUID clientId) {
        log.info("üîç [Admin] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {}", clientId);
        
        try {
            List<ClientNetworkAccessDTO> accesses = networkAccessService.getClientAccesses(clientId);
            log.info("‚úÖ [Admin] –ü–æ–ª—É—á–µ–Ω–æ {} –¥–æ—Å—Ç—É–ø–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}", accesses.size(), clientId);
            return ResponseEntity.ok(accesses);
        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è [Admin] –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", clientId);
            return ResponseEntity.notFound().build();
        } catch (Exception e) {
            log.error("‚ùå [Admin] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
     */
    @GetMapping("/network/{networkId}")
    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–∏", description = "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–î–æ—Å—Ç—É–ø—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"),
            @ApiResponse(responseCode = "404", description = "–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"),
            @ApiResponse(responseCode = "401", description = "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"),
            @ApiResponse(responseCode = "403", description = "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
    })
    public ResponseEntity<List<ClientNetworkAccessDTO>> getNetworkAccesses(@PathVariable UUID networkId) {
        log.info("üîç [Admin] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–≤ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {}", networkId);
        
        try {
            List<ClientNetworkAccessDTO> accesses = networkAccessService.getNetworkAccesses(networkId);
            log.info("‚úÖ [Admin] –ü–æ–ª—É—á–µ–Ω–æ {} –¥–æ—Å—Ç—É–ø–æ–≤ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ {}", accesses.size(), networkId);
            return ResponseEntity.ok(accesses);
        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è [Admin] –ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {}", networkId);
            return ResponseEntity.notFound().build();
        } catch (Exception e) {
            log.error("‚ùå [Admin] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–æ–≤
     */
    @GetMapping("/stats")
    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–æ–≤", description = "–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–æ—Å—Ç—É–ø–∞–º")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"),
            @ApiResponse(responseCode = "401", description = "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"),
            @ApiResponse(responseCode = "403", description = "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
    })
    public ResponseEntity<NetworkAccessService.AccessStats> getAccessStats() {
        log.info("üìä [Admin] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–æ–≤");
        
        try {
            NetworkAccessService.AccessStats stats = networkAccessService.getAccessStats();
            log.info("‚úÖ [Admin] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {} –≤—Å–µ–≥–æ, {} —Å –ª–∏–º–∏—Ç–∞–º–∏, {} –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö", 
                    stats.getTotalAccesses(), stats.getAccessesWithLimits(), stats.getUnlimitedAccesses());
            return ResponseEntity.ok(stats);
        } catch (Exception e) {
            log.error("‚ùå [Admin] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
}
